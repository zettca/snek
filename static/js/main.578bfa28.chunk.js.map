{"version":3,"sources":["index.js","inputHandlers.js"],"names":["REACT_APP_URL","process","root","document","getElementById","canvas","createElement","ctx","getContext","touchStart","x","y","appendChild","addEventListener","e","dir","keyCode","dirFromKeyCode","code","socket","emit","changedTouches","screenX","screenY","dX","dY","Math","abs","dirFromTouch","window","resizeWindow","tileSize","numTiles","colors","light","dark","io","body","clientWidth","clientHeight","size","min","width","height","floor","drawSquare","pos","color","map","n","w","h","fillStyle","fillRect","on","console","log","id","gameConfig","tilesX","tilesY","state","requestAnimationFrame","gameState","apple","snakes","forEach","snake","i","length","position","part","beginPath","ellipse","PI","fill","drawGame"],"mappings":"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","file":"static/js/main.578bfa28.chunk.js","sourcesContent":["import io from 'socket.io-client';\nimport './index.css';\nimport { dirFromKeyCode, dirFromTouch } from './inputHandlers';\n\nconst { REACT_APP_URL } = process.env;\n\nconst root = document.getElementById('root');\nconst canvas = document.createElement('canvas');\nconst ctx = canvas.getContext('2d');\n\n// canvas setup\nconst touchStart = { x: 0, y: 0 };\nroot.appendChild(canvas);\nroot.addEventListener('keydown', handleKeyDown);\nroot.addEventListener('touchstart', handleTouchStart, false);\nroot.addEventListener('touchend', handleTouchEnd, false);\nwindow.addEventListener('resize', resizeWindow);\n\n// Game setup\nconst tileSize = { x: 20, y: 20 };\nconst numTiles = { x: 20, y: 20 };\nconst colors = [\n  { light: '#9c27b0', dark: '#6a0080' }, // purple\n  { light: '#3f51b5', dark: '#002984' }, // blue\n  { light: '#00bcd4', dark: '#008ba3' }, // cyan\n  { light: '#4caf50', dark: '#087f23' }, // green\n  { light: '#ffeb3b', dark: '#c8b900' }, // yellow\n  { light: '#ff9800', dark: '#c66900' }, // orange\n];\n\nconst socket = io(REACT_APP_URL);\n\nsocket.on('connect', () => {\n  console.log(`Connected to: ${REACT_APP_URL} - ${socket.id}`);\n});\n\nsocket.on('gamestart', handleGameStart);\nsocket.on('statechange', handleGameChange);\n\n/* ============================== */\n\n// TODO: review window resizing\ndocument.addEventListener('DOMContentLoaded', resizeWindow, false);\n\nfunction handleGameStart(gameConfig) {\n  numTiles.x = gameConfig.tilesX;\n  numTiles.y = gameConfig.tilesY;\n}\n\nfunction handleGameChange(state) {\n  requestAnimationFrame(() => {\n    drawGame(state);\n  });\n}\n\nfunction handleKeyDown(e) {\n  const dir = dirFromKeyCode(e.code);\n  socket.emit('input', dir);\n}\n\nfunction handleTouchStart(e) {\n  touchStart.x = e.changedTouches[0].screenX;\n  touchStart.y = e.changedTouches[0].screenY;\n}\n\nfunction handleTouchEnd(e) {\n  const dX = e.changedTouches[0].screenX - touchStart.x;\n  const dY = e.changedTouches[0].screenY - touchStart.y;\n  const dir = dirFromTouch(dX, dY);\n  if (dir) socket.emit('input', dir);\n}\n\nfunction resizeWindow() {\n  const { clientWidth, clientHeight } = document.body || {};\n  const size = Math.min(clientWidth, clientHeight);\n  canvas.width = size;\n  canvas.height = size;\n\n  tileSize.x = Math.floor(size / numTiles.x);\n  tileSize.y = Math.floor(size / numTiles.y);\n}\n\n/* ============================== */\n\nfunction drawCircle(pos, color) {\n  ctx.beginPath();\n  ctx.ellipse(\n    (pos.x + 0.5) * tileSize.x,\n    (pos.y + 0.5) * tileSize.y,\n    tileSize.x / 2,\n    tileSize.y / 2,\n    0,\n    0,\n    2 * Math.PI\n  );\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\nfunction drawSquare(pos, color) {\n  const pad = 2;\n  const [x, w] = [pos.x, 1].map((n) => n * tileSize.x);\n  const [y, h] = [pos.y, 1].map((n) => n * tileSize.y);\n  ctx.fillStyle = color;\n  ctx.fillRect(x + pad, y + pad, w - pad, h - pad);\n}\n\nfunction drawGame(gameState) {\n  const { apple, snakes } = gameState;\n\n  // Draw Background\n  ctx.fillStyle = '#212121';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  // Draw Snakes\n  snakes.forEach((snake, i) => {\n    const color = colors[i % colors.length];\n    drawSquare(snake.position, color.light);\n    snake.body.forEach((part) => drawSquare(part, color.dark));\n  });\n\n  // Draw Apple\n  drawCircle(apple.position, '#FF0000');\n}\n","export function dirFromTouch(dX, dY) {\n  if (dX === 0 && dY === 0) return null;\n  if (Math.abs(dX) > Math.abs(dY)) {\n    return dX > 0 ? 'RIGHT' : 'LEFT';\n  } else {\n    return dY > 0 ? 'DOWN' : 'UP';\n  }\n}\n\nexport function dirFromKeyCode(keyCode) {\n  switch (keyCode) {\n    case 'KeyA':\n    case 'ArrowLeft':\n      return 'LEFT';\n    case 'KeyW':\n    case 'ArrowUp':\n      return 'UP';\n    case 'KeyD':\n    case 'ArrowRight':\n      return 'RIGHT';\n    case 'KeyS':\n    case 'ArrowDown':\n      return 'DOWN';\n    default:\n      return 'RIGHT';\n  }\n}\n"],"sourceRoot":""}