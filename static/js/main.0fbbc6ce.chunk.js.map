{"version":3,"sources":["GameRenderer.js","index.js","utils.js"],"names":["DEFAULT_SIZE","width","height","DEFAULT_TILE_NUM","x","y","COLORS","light","dark","calcTileSize","size","numTiles","Math","floor","GameRenderer","ctx","this","tileSize","pos","color","beginPath","ellipse","PI","fillStyle","fill","w","h","fillRect","gameState","apple","snakes","forEach","snake","i","length","drawSquare","position","body","part","drawCircle","REACT_APP_URL","process","root","document","getElementById","canvas","createElement","getContext","appendChild","gameRenderer","socket","io","on","console","log","id","gameConfig","tilesX","tilesY","setNumTiles","state","requestAnimationFrame","draw","touchStart","resizeWindow","warn","clientWidth","clientHeight","min","setSize","addEventListener","e","dir","event","code","dirFromEvent","emit","changedTouches","screenX","screenY","dX","dY","abs","dirFromTouch","window"],"mappings":"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","file":"static/js/main.0fbbc6ce.chunk.js","sourcesContent":["export const DEFAULT_SIZE = { width: 600, height: 600 };\nexport const DEFAULT_TILE_NUM = { x: 20, y: 20 };\n\nexport const COLORS = [\n  { light: \"#9c27b0\", dark: \"#6a0080\" }, // purple\n  { light: \"#3f51b5\", dark: \"#002984\" }, // blue\n  { light: \"#00bcd4\", dark: \"#008ba3\" }, // cyan\n  { light: \"#4caf50\", dark: \"#087f23\" }, // green\n  { light: \"#ffeb3b\", dark: \"#c8b900\" }, // yellow\n  { light: \"#ff9800\", dark: \"#c66900\" }, // orange\n];\n\nfunction calcTileSize(size, numTiles) {\n  const { x, y } = numTiles;\n  return {\n    x: Math.floor(size.width / x),\n    y: Math.floor(size.height / y),\n  };\n}\n\nexport class GameRenderer {\n  constructor(ctx, { numTiles = DEFAULT_TILE_NUM, size = DEFAULT_SIZE }) {\n    this.ctx = ctx;\n    this.numTiles = numTiles;\n    this.size = size;\n    this.tileSize = calcTileSize(size, numTiles);\n  }\n\n  setNumTiles(numTiles) {\n    this.numTiles = numTiles;\n    this.tileSize = calcTileSize(this.size, this.numTiles);\n  }\n\n  setSize(size) {\n    this.size = size;\n    this.tileSize = calcTileSize(this.size, this.numTiles);\n  }\n\n  drawCircle(pos, color) {\n    const { x, y } = this.tileSize;\n\n    this.ctx.beginPath();\n    this.ctx.ellipse((pos.x + 0.5) * x, (pos.y + 0.5) * y, x / 2, y / 2, 0, 0, 2 * Math.PI);\n    this.ctx.fillStyle = color;\n    this.ctx.fill();\n  }\n\n  drawSquare(pos, color) {\n    const { x: w, y: h } = this.tileSize;\n\n    const pad = 2;\n    const x = pos.x * w;\n    const y = pos.y * h;\n\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x + pad, y + pad, w - pad, h - pad);\n  }\n\n  draw(gameState) {\n    const { width, height } = this.size;\n    const { apple, snakes } = gameState;\n\n    // Draw Background\n    this.ctx.fillStyle = \"#212121\";\n    this.ctx.fillRect(0, 0, width, height);\n\n    // Draw Snakes\n    snakes.forEach((snake, i) => {\n      const color = COLORS[i % COLORS.length];\n      this.drawSquare(snake.position, color.light);\n      snake.body.forEach((part) => this.drawSquare(part, color.dark));\n    });\n\n    // Draw Apple\n    this.drawCircle(apple.position, \"#FF0000\");\n  }\n}\n","import io from \"socket.io-client\";\nimport \"./index.css\";\nimport { dirFromEvent, dirFromTouch } from \"./utils\";\nimport { GameRenderer } from \"./GameRenderer\";\n\nconst { REACT_APP_URL } = process.env;\n\nconst root = document.getElementById(\"root\");\nconst canvas = document.createElement(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nroot.appendChild(canvas);\n\n// Game setup\nconst size = { width: canvas.width, height: canvas.height };\nconst gameRenderer = new GameRenderer(ctx, { size });\n\nconst socket = io(REACT_APP_URL);\n\nsocket.on(\"connect\", () => {\n  console.log(`Connected to: ${REACT_APP_URL} - ${socket.id}`);\n});\n\nsocket.on(\"gamestart\", handleGameStart);\nsocket.on(\"statechange\", handleGameChange);\n\nfunction handleGameStart(gameConfig) {\n  const { tilesX, tilesY } = gameConfig;\n  console.log(gameConfig);\n  gameRenderer.setNumTiles({ x: tilesX, y: tilesY });\n}\n\nfunction handleGameChange(state) {\n  requestAnimationFrame(() => gameRenderer.draw(state));\n}\n\n// event setup\nconst touchStart = { x: 0, y: 0 };\n\nroot.addEventListener(\"keydown\", handleKeyDown);\nroot.addEventListener(\"touchstart\", handleTouchStart, false);\nroot.addEventListener(\"touchend\", handleTouchEnd, false);\nwindow.addEventListener(\"resize\", resizeWindow);\n\n// TODO: review window resizing\ndocument.addEventListener(\"DOMContentLoaded\", resizeWindow, false);\n\nfunction handleKeyDown(e) {\n  const dir = dirFromEvent(e);\n  socket.emit(\"input\", dir);\n}\n\nfunction handleTouchStart(e) {\n  touchStart.x = e.changedTouches[0].screenX;\n  touchStart.y = e.changedTouches[0].screenY;\n}\n\nfunction handleTouchEnd(e) {\n  const dX = e.changedTouches[0].screenX - touchStart.x;\n  const dY = e.changedTouches[0].screenY - touchStart.y;\n  const dir = dirFromTouch(dX, dY);\n  if (dir) socket.emit(\"input\", dir);\n}\n\nfunction resizeWindow() {\n  console.warn(\"RESIZE!\");\n  const { clientWidth, clientHeight } = document.body || {};\n  const size = Math.min(clientWidth, clientHeight);\n  canvas.width = size;\n  canvas.height = size;\n\n  gameRenderer.setSize({ width: size, height: size });\n}\n","export function dirFromTouch(dX, dY) {\n  if (dX === 0 && dY === 0) return null;\n  if (Math.abs(dX) > Math.abs(dY)) {\n    return dX > 0 ? \"RIGHT\" : \"LEFT\";\n  } else {\n    return dY > 0 ? \"DOWN\" : \"UP\";\n  }\n}\n\nexport function dirFromEvent(event) {\n  switch (event.code) {\n    case \"KeyA\":\n    case \"ArrowLeft\":\n      return \"LEFT\";\n    case \"KeyW\":\n    case \"ArrowUp\":\n      return \"UP\";\n    case \"KeyD\":\n    case \"ArrowRight\":\n      return \"RIGHT\";\n    case \"KeyS\":\n    case \"ArrowDown\":\n      return \"DOWN\";\n    default:\n      return \"RIGHT\";\n  }\n}\n"],"sourceRoot":""}